# GC-patches how-to

## Features

* instrumented GC: this is a bunch of timers and counters inserted in
  various places in the GC that helps figure out where the time is
  spent and especially what causes long pauses. These timers record,
  for example, the time spent on every minor collection, major
  collection slice (marking and sweeping recorded separately), etc.

* low-latency improvements: a set of small patches that removes the
  sources of large GC pauses, hence shortening the tail of the latency
  distribution. These are:
  - incremental marking of large arrays
  - incremental marking of global roots
  - separation of major slice from minor GC
  - smoothing of the major GC workload
  - better management of explicit calls to the major GC

* huge pages: use mmap with the "huge pages" flag to allocate the
  heap, to reduce the pressure on the TLB for programs with large
  heaps

* contiguous heap: use mmap to allocate the heap in a reserved
  interval of addresses to reduce the cost of the write barrier


## Usage

* compiler flags: you can add one of the following to the environment
  variable OCAMLOPTFLAGS:
  - `-runtime-variant i` to get the instrumented GC
  - `-runtime-variant m` to get the contiguous mmapped heap
  Note that you don't need to set anything here to get the
  low-latency improvements or the huge pages.
  With `M-x Omake.setenv`, <space> is bound to auto-completion, so you
  need to use `C-q <space>` to insert a space in the value.

* environment variables (set these before running the program):
  - OCAML_INSTR_FILE controls the output of the instrumented GC: set
    it to `[@][+-]filename`, where `@` makes the runtime append the
    process ID to the file name, `+` indicates that the data should be
    appended to the file, and `-` that the file should be truncated
    before writing. If you specify neither `+` nor `-`, the data will be
    appended.
  - OCAMLRUNPARAM has two new options:
    * `w=n`, where n is a small integer (1 to 50) to specify the
      window size for the GC workload smoothing. Reasonable values are
      probably between 10 and 20.
    * `H=1` to force the use of huge pages to allocate the heap. The
      program will fail if huge pages are not available.


## Notes

The instrumented runtime `-runtime-variant i` logs every event to
memory (even if OCAML_INSTR_FILE is not set) and dumps them at the end
of the run, so it's obviously not suitable for long-running
programs. It's also not suitable for benchmarking.

Once you have the instrumentation files, you can use two scripts on them:
* `ocaml-instr-report`: gives ASCII histograms of the distributions of
  the counters and timers.
* `ocaml-instr-graph`: uses gnuplot to show the data, with time on the
  x-axis.
These scripts are available in:
    /j/office/app/ocaml/builds/4.02.2-gc+j2-cent6_20150716_113018BST/bin/

With `-runtime-variant m`, the GC tries to allocate huge pages first,
then falls back on normal pages unless `H=1` is specified in
`OCAMLRUNPARAM`. If you specify `H=1` and you get:
  cannot initialize minor heap: mmap failed
that means your system doesn't have any huge pages configured. You
will need to get your sysadmin to configure them.
